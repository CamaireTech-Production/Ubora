rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =============================================================================
    // FONCTIONS UTILITAIRES
    // =============================================================================
    
    // Fonction pour vérifier si l'utilisateur est authentifié
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Fonction pour récupérer les données de l'utilisateur actuel
    function getCurrentUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // Fonction pour vérifier si l'utilisateur actuel est un directeur
    function isDirecteur() {
      return isAuthenticated() && getCurrentUser().data.role == 'directeur';
    }
    
    // Fonction pour vérifier si l'utilisateur actuel est un employé
    function isEmploye() {
      return isAuthenticated() && getCurrentUser().data.role == 'employe';
    }
    
    // Fonction pour vérifier si l'utilisateur actuel est un admin
    function isAdmin() {
      return isAuthenticated() && getCurrentUser().data.role == 'admin';
    }
    
    // Fonction pour vérifier si l'utilisateur appartient à la même agence
    function isSameAgency(agencyId) {
      return isAuthenticated() && getCurrentUser().data.agencyId == agencyId;
    }
    
    // Fonction pour vérifier si l'utilisateur est propriétaire du document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Fonction pour vérifier si un employé a accès au dashboard directeur
    function hasDirectorDashboardAccess() {
      return isAuthenticated() && (
        isDirecteur() || 
        (isEmploye() && getCurrentUser().data.hasDirectorDashboardAccess == true)
      );
    }
    
    // Fonction pour vérifier si un utilisateur peut créer des formulaires
    function canCreateForms() {
      return isDirecteur() || hasDirectorDashboardAccess();
    }
    
    // Fonction pour vérifier si un utilisateur peut créer des tableaux de bord
    function canCreateDashboards() {
      return isDirecteur() || hasDirectorDashboardAccess();
    }
    
    // Fonction pour vérifier si un utilisateur peut gérer les formulaires d'autres employés
    function canManageEmployeeForms() {
      return isDirecteur() || hasDirectorDashboardAccess();
    }

    // =============================================================================
    // COLLECTION USERS
    // Règles simplifiées : 
    // - Un utilisateur peut lire/modifier sa propre fiche
    // - Un directeur peut lire tous les utilisateurs de son agence
    // =============================================================================
    
    match /users/{userId} {
      // LECTURE des utilisateurs
      allow read: if isAuthenticated() && (
        request.auth.uid == userId ||
        (isDirecteur() && isSameAgency(resource.data.agencyId)) ||
        (hasDirectorDashboardAccess() && isSameAgency(resource.data.agencyId)) ||
        isAdmin()
      );
      
      // CRÉATION d'un utilisateur
      allow create: if isAuthenticated() && 
                   request.auth.uid == userId &&
                   request.resource.data.keys().hasAll(['name', 'email', 'role', 'agencyId']) &&
                   (request.resource.data.role in ['directeur', 'employe', 'admin']);
      
      // MODIFICATION d'un utilisateur
      allow update: if isAuthenticated() && (
        request.auth.uid == userId ||
        (isDirecteur() && isSameAgency(resource.data.agencyId)) ||
        isAdmin()
      );
      
      // SUPPRESSION d'un utilisateur
      allow delete: if (isDirecteur() && 
                       isSameAgency(resource.data.agencyId) &&
                       request.auth.uid != userId) ||
                     isAdmin();
    }

    // =============================================================================
    // COLLECTION FORMS
    // Règles simplifiées :
    // - Seul un directeur peut créer/modifier/supprimer des formulaires
    // - Les employés peuvent lire les formulaires de leur agence
    // - Tous les formulaires sont isolés par agence
    // =============================================================================
    
    match /forms/{formId} {
      // LECTURE des formulaires
      allow read: if isAuthenticated() && (isAdmin() || isSameAgency(resource.data.agencyId));
      
      // CRÉATION des formulaires
      allow create: if (isAdmin() || canCreateForms()) && 
                   (isAdmin() || isSameAgency(request.resource.data.agencyId)) &&
                   request.resource.data.createdBy == request.auth.uid &&
                   (isAdmin() || request.resource.data.createdByRole in ['directeur', 'employe']);
      
      // MODIFICATION des formulaires
      allow update: if isAuthenticated() && (isAdmin() || isSameAgency(resource.data.agencyId)) && (
        isAdmin() ||
        isDirecteur() ||
        (isEmploye() && (
          resource.data.createdByEmployeeId == request.auth.uid ||
          canManageEmployeeForms()
        ))
      );
      
      // SUPPRESSION des formulaires
      allow delete: if isAuthenticated() && (isAdmin() || isSameAgency(resource.data.agencyId)) && (
        isAdmin() ||
        isDirecteur() ||
        (isEmploye() && resource.data.createdByEmployeeId == request.auth.uid)
      );
    }

    // =============================================================================
    // COLLECTION FORMENTRIES
    // Règles simplifiées :
    // - Un employé peut créer des entrées pour les formulaires de son agence
    // - Un directeur peut lire toutes les entrées de son agence
    // - Un employé peut lire ses propres entrées
    // =============================================================================
    
    match /formEntries/{entryId} {
      // LECTURE des entrées de formulaire
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isDirecteur() && isSameAgency(resource.data.agencyId)) ||
        (hasDirectorDashboardAccess() && isSameAgency(resource.data.agencyId)) ||
        (isEmploye() && isOwner(resource.data.userId) && isSameAgency(resource.data.agencyId))
      );
      
      // CRÉATION des entrées de formulaire
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   (isAdmin() || isSameAgency(request.resource.data.agencyId)) &&
                   request.resource.data.keys().hasAll(['formId', 'userId', 'agencyId', 'answers']);
      
      // MODIFICATION des entrées de formulaire
      allow update: if isAuthenticated() && (
        isAdmin() ||
        (isDirecteur() && isSameAgency(resource.data.agencyId)) ||
        (isEmploye() && isOwner(resource.data.userId) && isSameAgency(resource.data.agencyId))
      );
      
      // SUPPRESSION des entrées de formulaire
      allow delete: if isAdmin() || (isDirecteur() && isSameAgency(resource.data.agencyId));
    }

    // =============================================================================
    // COLLECTION CONVERSATIONS
    // Règles pour les conversations de chat IA :
    // - Seuls les directeurs peuvent créer/lire/modifier leurs conversations
    // - Les conversations sont isolées par agence
    // =============================================================================
    
    match /conversations/{conversationId} {
      // LECTURE des conversations
      allow read: if hasDirectorDashboardAccess() && 
                  isSameAgency(resource.data.agencyId) &&
                  resource.data.directorId == request.auth.uid;
      
      // CRÉATION des conversations
      allow create: if hasDirectorDashboardAccess() && 
                   isSameAgency(request.resource.data.agencyId) &&
                   request.resource.data.directorId == request.auth.uid &&
                   request.resource.data.keys().hasAll(['directorId', 'agencyId', 'title']);
      
      // MODIFICATION des conversations
      allow update: if hasDirectorDashboardAccess() && 
                   isSameAgency(resource.data.agencyId) &&
                   resource.data.directorId == request.auth.uid;
      
      // SUPPRESSION des conversations
      allow delete: if hasDirectorDashboardAccess() && 
                   isSameAgency(resource.data.agencyId) &&
                   resource.data.directorId == request.auth.uid;
      
      // Messages des conversations
      match /messages/{messageId} {
        allow read, write: if hasDirectorDashboardAccess() && 
                          isSameAgency(get(/databases/$(database)/documents/conversations/$(conversationId)).data.agencyId) &&
                          get(/databases/$(database)/documents/conversations/$(conversationId)).data.directorId == request.auth.uid;
      }
    }

    // =============================================================================
    // COLLECTION DASHBOARDS
    // Règles pour les tableaux de bord personnalisés :
    // - Seuls les directeurs peuvent créer/lire/modifier/supprimer leurs tableaux de bord
    // - Les tableaux de bord sont isolés par agence
    // =============================================================================
    
    match /dashboards/{dashboardId} {
      // LECTURE des tableaux de bord
      allow read: if isAdmin() || (hasDirectorDashboardAccess() && 
                  isSameAgency(resource.data.agencyId));
      
      // CRÉATION des tableaux de bord
      allow create: if isAdmin() || (canCreateDashboards() && 
                   isSameAgency(request.resource.data.agencyId) &&
                   request.resource.data.createdBy == request.auth.uid &&
                   request.resource.data.createdByRole in ['directeur', 'employe'] &&
                   request.resource.data.keys().hasAll(['name', 'metrics', 'createdBy', 'agencyId']));
      
      // MODIFICATION des tableaux de bord
      allow update: if isAdmin() || (hasDirectorDashboardAccess() && 
                   isSameAgency(resource.data.agencyId) && (
        isDirecteur() ||
        (isEmploye() && resource.data.createdByEmployeeId == request.auth.uid)
      ));
      
      // SUPPRESSION des tableaux de bord
      allow delete: if isAdmin() || (hasDirectorDashboardAccess() && 
                   isSameAgency(resource.data.agencyId) && (
        isDirecteur() ||
        (isEmploye() && resource.data.createdByEmployeeId == request.auth.uid)
      ));
    }

    // =============================================================================
    // COLLECTION ACTIVITY LOGS
    // Règles pour les logs d'activité :
    // - Seuls les admins peuvent lire tous les logs
    // - Tous les utilisateurs authentifiés peuvent créer des logs
    // =============================================================================
    
    match /activityLogs/{logId} {
      // LECTURE des logs d'activité
      allow read: if isAdmin();
      
      // CRÉATION de logs d'activité
      allow create: if isAuthenticated();
      
      // MODIFICATION des logs d'activité (seuls les admins)
      allow update: if isAdmin();
      
      // SUPPRESSION des logs d'activité (seuls les admins)
      allow delete: if isAdmin();
    }

    // =============================================================================
    // COLLECTION PUSH NOTIFICATIONS
    // Règles pour les notifications push :
    // - Seuls les admins peuvent lire tous les logs
    // - Tous les utilisateurs authentifiés peuvent créer des logs
    // =============================================================================
    
    match /pushNotifications/{notificationId} {
      // LECTURE des notifications push
      allow read: if isAdmin();
      
      // CRÉATION de notifications push
      allow create: if isAuthenticated();
      
      // MODIFICATION des notifications push (seuls les admins)
      allow update: if isAdmin();
      
      // SUPPRESSION des notifications push (seuls les admins)
      allow delete: if isAdmin();
    }

    // =============================================================================
    // COLLECTION APP USAGE SESSIONS
    // Règles pour les sessions d'utilisation :
    // - Seuls les admins peuvent lire tous les logs
    // - Tous les utilisateurs authentifiés peuvent créer des logs
    // =============================================================================
    
    match /appUsageSessions/{sessionId} {
      // LECTURE des sessions d'utilisation
      allow read: if isAdmin();
      
      // CRÉATION de sessions d'utilisation
      allow create: if isAuthenticated();
      
      // MODIFICATION des sessions d'utilisation (seuls les admins)
      allow update: if isAdmin();
      
      // SUPPRESSION des sessions d'utilisation (seuls les admins)
      allow delete: if isAdmin();
    }

    // =============================================================================
    // COLLECTION SUBSCRIPTION SESSIONS
    // Règles pour les sessions d'abonnement :
    // - Seuls les admins peuvent lire tous les logs
    // - Tous les utilisateurs authentifiés peuvent créer des logs
    // =============================================================================
    
    match /subscriptionSessions/{sessionId} {
      // LECTURE des sessions d'abonnement
      allow read: if isAdmin();
      
      // CRÉATION de sessions d'abonnement
      allow create: if isAuthenticated();
      
      // MODIFICATION des sessions d'abonnement (seuls les admins)
      allow update: if isAdmin();
      
      // SUPPRESSION des sessions d'abonnement (seuls les admins)
      allow delete: if isAdmin();
    }

    // =============================================================================
    // COLLECTION PURCHASE HISTORY
    // Règles pour l'historique des achats :
    // - Seuls les admins peuvent lire tous les logs
    // - Tous les utilisateurs authentifiés peuvent créer des logs
    // =============================================================================
    
    match /purchaseHistory/{purchaseId} {
      // LECTURE de l'historique des achats
      allow read: if isAdmin();
      
      // CRÉATION d'historique d'achat
      allow create: if isAuthenticated();
      
      // MODIFICATION de l'historique des achats (seuls les admins)
      allow update: if isAdmin();
      
      // SUPPRESSION de l'historique des achats (seuls les admins)
      allow delete: if isAdmin();
    }

    // =============================================================================
    // RÈGLE DE SÉCURITÉ GLOBALE
    // Bloquer tout accès non authentifié par défaut
    // =============================================================================
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}